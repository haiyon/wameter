name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: ''

permissions:
  contents: write
  issues: write
  packages: write

jobs:
  verify:
    name: Verify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true
          cache: true

      - name: Verify dependencies
        run: make verify

      - name: Run tests
        run: make test

      - name: Run linters
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --out-format=colored-line-number

  build-all:
    name: Build All Platforms
    needs: verify
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true
          cache: true

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build for platform
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          VERSION: ${{ env.VERSION }}
        run: |
          make build dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wameter-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/
          retention-days: 7

  release:
    name: Create Release
    needs: build-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Generate checksums
        working-directory: artifacts
        run: |
          find . -type f -name "*.tar.gz" -exec sha256sum {} \; > sha256sums.txt

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.VERSION }}
          files: |
            artifacts/**/*.tar.gz
            artifacts/sha256sums.txt
          draft: true
          prerelease: ${{ contains(env.VERSION, '-rc') || contains(env.VERSION, '-beta') || contains(env.VERSION, '-alpha') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-release:
    name: Docker Release
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/server/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            TARGETOS=linux
            TARGETARCH=${{ matrix.arch }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push agent image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/agent/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            TARGETOS=linux
            TARGETARCH=${{ matrix.arch }}
          tags: ${{ steps.meta.outputs.tags }}-agent
          labels: ${{ steps.meta.outputs.labels }}
