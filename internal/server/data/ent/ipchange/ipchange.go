// Code generated by ent, DO NOT EDIT.

package ipchange

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the ipchange type in the database.
	Label = "ip_change"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAgentID holds the string denoting the agent_id field in the database.
	FieldAgentID = "agent_id"
	// FieldInterfaceName holds the string denoting the interface_name field in the database.
	FieldInterfaceName = "interface_name"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldIsExternal holds the string denoting the is_external field in the database.
	FieldIsExternal = "is_external"
	// FieldOldAddrs holds the string denoting the old_addrs field in the database.
	FieldOldAddrs = "old_addrs"
	// FieldNewAddrs holds the string denoting the new_addrs field in the database.
	FieldNewAddrs = "new_addrs"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the ipchange in the database.
	Table = "ip_changes"
)

// Columns holds all SQL columns for ipchange fields.
var Columns = []string{
	FieldID,
	FieldAgentID,
	FieldInterfaceName,
	FieldVersion,
	FieldIsExternal,
	FieldOldAddrs,
	FieldNewAddrs,
	FieldAction,
	FieldReason,
	FieldTimestamp,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the IPChange queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAgentID orders the results by the agent_id field.
func ByAgentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentID, opts...).ToFunc()
}

// ByInterfaceName orders the results by the interface_name field.
func ByInterfaceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInterfaceName, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByIsExternal orders the results by the is_external field.
func ByIsExternal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsExternal, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
