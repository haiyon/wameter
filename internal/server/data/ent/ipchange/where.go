// Code generated by ent, DO NOT EDIT.

package ipchange

import (
	"time"
	"wameter/internal/server/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.IPChange {
	return predicate.IPChange(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.IPChange {
	return predicate.IPChange(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.IPChange {
	return predicate.IPChange(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.IPChange {
	return predicate.IPChange(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.IPChange {
	return predicate.IPChange(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.IPChange {
	return predicate.IPChange(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.IPChange {
	return predicate.IPChange(sql.FieldLTE(FieldID, id))
}

// AgentID applies equality check predicate on the "agent_id" field. It's identical to AgentIDEQ.
func AgentID(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldAgentID, v))
}

// InterfaceName applies equality check predicate on the "interface_name" field. It's identical to InterfaceNameEQ.
func InterfaceName(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldInterfaceName, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldVersion, v))
}

// IsExternal applies equality check predicate on the "is_external" field. It's identical to IsExternalEQ.
func IsExternal(v bool) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldIsExternal, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldAction, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldReason, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldTimestamp, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldCreatedAt, v))
}

// AgentIDEQ applies the EQ predicate on the "agent_id" field.
func AgentIDEQ(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldAgentID, v))
}

// AgentIDNEQ applies the NEQ predicate on the "agent_id" field.
func AgentIDNEQ(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldNEQ(FieldAgentID, v))
}

// AgentIDIn applies the In predicate on the "agent_id" field.
func AgentIDIn(vs ...string) predicate.IPChange {
	return predicate.IPChange(sql.FieldIn(FieldAgentID, vs...))
}

// AgentIDNotIn applies the NotIn predicate on the "agent_id" field.
func AgentIDNotIn(vs ...string) predicate.IPChange {
	return predicate.IPChange(sql.FieldNotIn(FieldAgentID, vs...))
}

// AgentIDGT applies the GT predicate on the "agent_id" field.
func AgentIDGT(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldGT(FieldAgentID, v))
}

// AgentIDGTE applies the GTE predicate on the "agent_id" field.
func AgentIDGTE(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldGTE(FieldAgentID, v))
}

// AgentIDLT applies the LT predicate on the "agent_id" field.
func AgentIDLT(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldLT(FieldAgentID, v))
}

// AgentIDLTE applies the LTE predicate on the "agent_id" field.
func AgentIDLTE(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldLTE(FieldAgentID, v))
}

// AgentIDContains applies the Contains predicate on the "agent_id" field.
func AgentIDContains(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldContains(FieldAgentID, v))
}

// AgentIDHasPrefix applies the HasPrefix predicate on the "agent_id" field.
func AgentIDHasPrefix(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldHasPrefix(FieldAgentID, v))
}

// AgentIDHasSuffix applies the HasSuffix predicate on the "agent_id" field.
func AgentIDHasSuffix(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldHasSuffix(FieldAgentID, v))
}

// AgentIDEqualFold applies the EqualFold predicate on the "agent_id" field.
func AgentIDEqualFold(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEqualFold(FieldAgentID, v))
}

// AgentIDContainsFold applies the ContainsFold predicate on the "agent_id" field.
func AgentIDContainsFold(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldContainsFold(FieldAgentID, v))
}

// InterfaceNameEQ applies the EQ predicate on the "interface_name" field.
func InterfaceNameEQ(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldInterfaceName, v))
}

// InterfaceNameNEQ applies the NEQ predicate on the "interface_name" field.
func InterfaceNameNEQ(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldNEQ(FieldInterfaceName, v))
}

// InterfaceNameIn applies the In predicate on the "interface_name" field.
func InterfaceNameIn(vs ...string) predicate.IPChange {
	return predicate.IPChange(sql.FieldIn(FieldInterfaceName, vs...))
}

// InterfaceNameNotIn applies the NotIn predicate on the "interface_name" field.
func InterfaceNameNotIn(vs ...string) predicate.IPChange {
	return predicate.IPChange(sql.FieldNotIn(FieldInterfaceName, vs...))
}

// InterfaceNameGT applies the GT predicate on the "interface_name" field.
func InterfaceNameGT(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldGT(FieldInterfaceName, v))
}

// InterfaceNameGTE applies the GTE predicate on the "interface_name" field.
func InterfaceNameGTE(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldGTE(FieldInterfaceName, v))
}

// InterfaceNameLT applies the LT predicate on the "interface_name" field.
func InterfaceNameLT(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldLT(FieldInterfaceName, v))
}

// InterfaceNameLTE applies the LTE predicate on the "interface_name" field.
func InterfaceNameLTE(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldLTE(FieldInterfaceName, v))
}

// InterfaceNameContains applies the Contains predicate on the "interface_name" field.
func InterfaceNameContains(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldContains(FieldInterfaceName, v))
}

// InterfaceNameHasPrefix applies the HasPrefix predicate on the "interface_name" field.
func InterfaceNameHasPrefix(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldHasPrefix(FieldInterfaceName, v))
}

// InterfaceNameHasSuffix applies the HasSuffix predicate on the "interface_name" field.
func InterfaceNameHasSuffix(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldHasSuffix(FieldInterfaceName, v))
}

// InterfaceNameIsNil applies the IsNil predicate on the "interface_name" field.
func InterfaceNameIsNil() predicate.IPChange {
	return predicate.IPChange(sql.FieldIsNull(FieldInterfaceName))
}

// InterfaceNameNotNil applies the NotNil predicate on the "interface_name" field.
func InterfaceNameNotNil() predicate.IPChange {
	return predicate.IPChange(sql.FieldNotNull(FieldInterfaceName))
}

// InterfaceNameEqualFold applies the EqualFold predicate on the "interface_name" field.
func InterfaceNameEqualFold(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEqualFold(FieldInterfaceName, v))
}

// InterfaceNameContainsFold applies the ContainsFold predicate on the "interface_name" field.
func InterfaceNameContainsFold(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldContainsFold(FieldInterfaceName, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.IPChange {
	return predicate.IPChange(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.IPChange {
	return predicate.IPChange(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldContainsFold(FieldVersion, v))
}

// IsExternalEQ applies the EQ predicate on the "is_external" field.
func IsExternalEQ(v bool) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldIsExternal, v))
}

// IsExternalNEQ applies the NEQ predicate on the "is_external" field.
func IsExternalNEQ(v bool) predicate.IPChange {
	return predicate.IPChange(sql.FieldNEQ(FieldIsExternal, v))
}

// OldAddrsIsNil applies the IsNil predicate on the "old_addrs" field.
func OldAddrsIsNil() predicate.IPChange {
	return predicate.IPChange(sql.FieldIsNull(FieldOldAddrs))
}

// OldAddrsNotNil applies the NotNil predicate on the "old_addrs" field.
func OldAddrsNotNil() predicate.IPChange {
	return predicate.IPChange(sql.FieldNotNull(FieldOldAddrs))
}

// NewAddrsIsNil applies the IsNil predicate on the "new_addrs" field.
func NewAddrsIsNil() predicate.IPChange {
	return predicate.IPChange(sql.FieldIsNull(FieldNewAddrs))
}

// NewAddrsNotNil applies the NotNil predicate on the "new_addrs" field.
func NewAddrsNotNil() predicate.IPChange {
	return predicate.IPChange(sql.FieldNotNull(FieldNewAddrs))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.IPChange {
	return predicate.IPChange(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.IPChange {
	return predicate.IPChange(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldHasSuffix(FieldAction, v))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldContainsFold(FieldAction, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.IPChange {
	return predicate.IPChange(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.IPChange {
	return predicate.IPChange(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.IPChange {
	return predicate.IPChange(sql.FieldContainsFold(FieldReason, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldLTE(FieldTimestamp, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IPChange {
	return predicate.IPChange(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IPChange) predicate.IPChange {
	return predicate.IPChange(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IPChange) predicate.IPChange {
	return predicate.IPChange(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IPChange) predicate.IPChange {
	return predicate.IPChange(sql.NotPredicates(p))
}
