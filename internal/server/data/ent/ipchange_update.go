// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wameter/internal/server/data/ent/ipchange"
	"wameter/internal/server/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IPChangeUpdate is the builder for updating IPChange entities.
type IPChangeUpdate struct {
	config
	hooks    []Hook
	mutation *IPChangeMutation
}

// Where appends a list predicates to the IPChangeUpdate builder.
func (icu *IPChangeUpdate) Where(ps ...predicate.IPChange) *IPChangeUpdate {
	icu.mutation.Where(ps...)
	return icu
}

// SetAgentID sets the "agent_id" field.
func (icu *IPChangeUpdate) SetAgentID(s string) *IPChangeUpdate {
	icu.mutation.SetAgentID(s)
	return icu
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (icu *IPChangeUpdate) SetNillableAgentID(s *string) *IPChangeUpdate {
	if s != nil {
		icu.SetAgentID(*s)
	}
	return icu
}

// SetInterfaceName sets the "interface_name" field.
func (icu *IPChangeUpdate) SetInterfaceName(s string) *IPChangeUpdate {
	icu.mutation.SetInterfaceName(s)
	return icu
}

// SetNillableInterfaceName sets the "interface_name" field if the given value is not nil.
func (icu *IPChangeUpdate) SetNillableInterfaceName(s *string) *IPChangeUpdate {
	if s != nil {
		icu.SetInterfaceName(*s)
	}
	return icu
}

// ClearInterfaceName clears the value of the "interface_name" field.
func (icu *IPChangeUpdate) ClearInterfaceName() *IPChangeUpdate {
	icu.mutation.ClearInterfaceName()
	return icu
}

// SetVersion sets the "version" field.
func (icu *IPChangeUpdate) SetVersion(s string) *IPChangeUpdate {
	icu.mutation.SetVersion(s)
	return icu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (icu *IPChangeUpdate) SetNillableVersion(s *string) *IPChangeUpdate {
	if s != nil {
		icu.SetVersion(*s)
	}
	return icu
}

// SetIsExternal sets the "is_external" field.
func (icu *IPChangeUpdate) SetIsExternal(b bool) *IPChangeUpdate {
	icu.mutation.SetIsExternal(b)
	return icu
}

// SetNillableIsExternal sets the "is_external" field if the given value is not nil.
func (icu *IPChangeUpdate) SetNillableIsExternal(b *bool) *IPChangeUpdate {
	if b != nil {
		icu.SetIsExternal(*b)
	}
	return icu
}

// SetOldAddrs sets the "old_addrs" field.
func (icu *IPChangeUpdate) SetOldAddrs(m map[string]interface{}) *IPChangeUpdate {
	icu.mutation.SetOldAddrs(m)
	return icu
}

// ClearOldAddrs clears the value of the "old_addrs" field.
func (icu *IPChangeUpdate) ClearOldAddrs() *IPChangeUpdate {
	icu.mutation.ClearOldAddrs()
	return icu
}

// SetNewAddrs sets the "new_addrs" field.
func (icu *IPChangeUpdate) SetNewAddrs(m map[string]interface{}) *IPChangeUpdate {
	icu.mutation.SetNewAddrs(m)
	return icu
}

// ClearNewAddrs clears the value of the "new_addrs" field.
func (icu *IPChangeUpdate) ClearNewAddrs() *IPChangeUpdate {
	icu.mutation.ClearNewAddrs()
	return icu
}

// SetAction sets the "action" field.
func (icu *IPChangeUpdate) SetAction(s string) *IPChangeUpdate {
	icu.mutation.SetAction(s)
	return icu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (icu *IPChangeUpdate) SetNillableAction(s *string) *IPChangeUpdate {
	if s != nil {
		icu.SetAction(*s)
	}
	return icu
}

// SetReason sets the "reason" field.
func (icu *IPChangeUpdate) SetReason(s string) *IPChangeUpdate {
	icu.mutation.SetReason(s)
	return icu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (icu *IPChangeUpdate) SetNillableReason(s *string) *IPChangeUpdate {
	if s != nil {
		icu.SetReason(*s)
	}
	return icu
}

// SetTimestamp sets the "timestamp" field.
func (icu *IPChangeUpdate) SetTimestamp(t time.Time) *IPChangeUpdate {
	icu.mutation.SetTimestamp(t)
	return icu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (icu *IPChangeUpdate) SetNillableTimestamp(t *time.Time) *IPChangeUpdate {
	if t != nil {
		icu.SetTimestamp(*t)
	}
	return icu
}

// SetCreatedAt sets the "created_at" field.
func (icu *IPChangeUpdate) SetCreatedAt(t time.Time) *IPChangeUpdate {
	icu.mutation.SetCreatedAt(t)
	return icu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (icu *IPChangeUpdate) SetNillableCreatedAt(t *time.Time) *IPChangeUpdate {
	if t != nil {
		icu.SetCreatedAt(*t)
	}
	return icu
}

// Mutation returns the IPChangeMutation object of the builder.
func (icu *IPChangeUpdate) Mutation() *IPChangeMutation {
	return icu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (icu *IPChangeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, icu.sqlSave, icu.mutation, icu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (icu *IPChangeUpdate) SaveX(ctx context.Context) int {
	affected, err := icu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (icu *IPChangeUpdate) Exec(ctx context.Context) error {
	_, err := icu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icu *IPChangeUpdate) ExecX(ctx context.Context) {
	if err := icu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (icu *IPChangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ipchange.Table, ipchange.Columns, sqlgraph.NewFieldSpec(ipchange.FieldID, field.TypeInt64))
	if ps := icu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icu.mutation.AgentID(); ok {
		_spec.SetField(ipchange.FieldAgentID, field.TypeString, value)
	}
	if value, ok := icu.mutation.InterfaceName(); ok {
		_spec.SetField(ipchange.FieldInterfaceName, field.TypeString, value)
	}
	if icu.mutation.InterfaceNameCleared() {
		_spec.ClearField(ipchange.FieldInterfaceName, field.TypeString)
	}
	if value, ok := icu.mutation.Version(); ok {
		_spec.SetField(ipchange.FieldVersion, field.TypeString, value)
	}
	if value, ok := icu.mutation.IsExternal(); ok {
		_spec.SetField(ipchange.FieldIsExternal, field.TypeBool, value)
	}
	if value, ok := icu.mutation.OldAddrs(); ok {
		_spec.SetField(ipchange.FieldOldAddrs, field.TypeJSON, value)
	}
	if icu.mutation.OldAddrsCleared() {
		_spec.ClearField(ipchange.FieldOldAddrs, field.TypeJSON)
	}
	if value, ok := icu.mutation.NewAddrs(); ok {
		_spec.SetField(ipchange.FieldNewAddrs, field.TypeJSON, value)
	}
	if icu.mutation.NewAddrsCleared() {
		_spec.ClearField(ipchange.FieldNewAddrs, field.TypeJSON)
	}
	if value, ok := icu.mutation.Action(); ok {
		_spec.SetField(ipchange.FieldAction, field.TypeString, value)
	}
	if value, ok := icu.mutation.Reason(); ok {
		_spec.SetField(ipchange.FieldReason, field.TypeString, value)
	}
	if value, ok := icu.mutation.Timestamp(); ok {
		_spec.SetField(ipchange.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := icu.mutation.CreatedAt(); ok {
		_spec.SetField(ipchange.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, icu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	icu.mutation.done = true
	return n, nil
}

// IPChangeUpdateOne is the builder for updating a single IPChange entity.
type IPChangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IPChangeMutation
}

// SetAgentID sets the "agent_id" field.
func (icuo *IPChangeUpdateOne) SetAgentID(s string) *IPChangeUpdateOne {
	icuo.mutation.SetAgentID(s)
	return icuo
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (icuo *IPChangeUpdateOne) SetNillableAgentID(s *string) *IPChangeUpdateOne {
	if s != nil {
		icuo.SetAgentID(*s)
	}
	return icuo
}

// SetInterfaceName sets the "interface_name" field.
func (icuo *IPChangeUpdateOne) SetInterfaceName(s string) *IPChangeUpdateOne {
	icuo.mutation.SetInterfaceName(s)
	return icuo
}

// SetNillableInterfaceName sets the "interface_name" field if the given value is not nil.
func (icuo *IPChangeUpdateOne) SetNillableInterfaceName(s *string) *IPChangeUpdateOne {
	if s != nil {
		icuo.SetInterfaceName(*s)
	}
	return icuo
}

// ClearInterfaceName clears the value of the "interface_name" field.
func (icuo *IPChangeUpdateOne) ClearInterfaceName() *IPChangeUpdateOne {
	icuo.mutation.ClearInterfaceName()
	return icuo
}

// SetVersion sets the "version" field.
func (icuo *IPChangeUpdateOne) SetVersion(s string) *IPChangeUpdateOne {
	icuo.mutation.SetVersion(s)
	return icuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (icuo *IPChangeUpdateOne) SetNillableVersion(s *string) *IPChangeUpdateOne {
	if s != nil {
		icuo.SetVersion(*s)
	}
	return icuo
}

// SetIsExternal sets the "is_external" field.
func (icuo *IPChangeUpdateOne) SetIsExternal(b bool) *IPChangeUpdateOne {
	icuo.mutation.SetIsExternal(b)
	return icuo
}

// SetNillableIsExternal sets the "is_external" field if the given value is not nil.
func (icuo *IPChangeUpdateOne) SetNillableIsExternal(b *bool) *IPChangeUpdateOne {
	if b != nil {
		icuo.SetIsExternal(*b)
	}
	return icuo
}

// SetOldAddrs sets the "old_addrs" field.
func (icuo *IPChangeUpdateOne) SetOldAddrs(m map[string]interface{}) *IPChangeUpdateOne {
	icuo.mutation.SetOldAddrs(m)
	return icuo
}

// ClearOldAddrs clears the value of the "old_addrs" field.
func (icuo *IPChangeUpdateOne) ClearOldAddrs() *IPChangeUpdateOne {
	icuo.mutation.ClearOldAddrs()
	return icuo
}

// SetNewAddrs sets the "new_addrs" field.
func (icuo *IPChangeUpdateOne) SetNewAddrs(m map[string]interface{}) *IPChangeUpdateOne {
	icuo.mutation.SetNewAddrs(m)
	return icuo
}

// ClearNewAddrs clears the value of the "new_addrs" field.
func (icuo *IPChangeUpdateOne) ClearNewAddrs() *IPChangeUpdateOne {
	icuo.mutation.ClearNewAddrs()
	return icuo
}

// SetAction sets the "action" field.
func (icuo *IPChangeUpdateOne) SetAction(s string) *IPChangeUpdateOne {
	icuo.mutation.SetAction(s)
	return icuo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (icuo *IPChangeUpdateOne) SetNillableAction(s *string) *IPChangeUpdateOne {
	if s != nil {
		icuo.SetAction(*s)
	}
	return icuo
}

// SetReason sets the "reason" field.
func (icuo *IPChangeUpdateOne) SetReason(s string) *IPChangeUpdateOne {
	icuo.mutation.SetReason(s)
	return icuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (icuo *IPChangeUpdateOne) SetNillableReason(s *string) *IPChangeUpdateOne {
	if s != nil {
		icuo.SetReason(*s)
	}
	return icuo
}

// SetTimestamp sets the "timestamp" field.
func (icuo *IPChangeUpdateOne) SetTimestamp(t time.Time) *IPChangeUpdateOne {
	icuo.mutation.SetTimestamp(t)
	return icuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (icuo *IPChangeUpdateOne) SetNillableTimestamp(t *time.Time) *IPChangeUpdateOne {
	if t != nil {
		icuo.SetTimestamp(*t)
	}
	return icuo
}

// SetCreatedAt sets the "created_at" field.
func (icuo *IPChangeUpdateOne) SetCreatedAt(t time.Time) *IPChangeUpdateOne {
	icuo.mutation.SetCreatedAt(t)
	return icuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (icuo *IPChangeUpdateOne) SetNillableCreatedAt(t *time.Time) *IPChangeUpdateOne {
	if t != nil {
		icuo.SetCreatedAt(*t)
	}
	return icuo
}

// Mutation returns the IPChangeMutation object of the builder.
func (icuo *IPChangeUpdateOne) Mutation() *IPChangeMutation {
	return icuo.mutation
}

// Where appends a list predicates to the IPChangeUpdate builder.
func (icuo *IPChangeUpdateOne) Where(ps ...predicate.IPChange) *IPChangeUpdateOne {
	icuo.mutation.Where(ps...)
	return icuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (icuo *IPChangeUpdateOne) Select(field string, fields ...string) *IPChangeUpdateOne {
	icuo.fields = append([]string{field}, fields...)
	return icuo
}

// Save executes the query and returns the updated IPChange entity.
func (icuo *IPChangeUpdateOne) Save(ctx context.Context) (*IPChange, error) {
	return withHooks(ctx, icuo.sqlSave, icuo.mutation, icuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (icuo *IPChangeUpdateOne) SaveX(ctx context.Context) *IPChange {
	node, err := icuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (icuo *IPChangeUpdateOne) Exec(ctx context.Context) error {
	_, err := icuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icuo *IPChangeUpdateOne) ExecX(ctx context.Context) {
	if err := icuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (icuo *IPChangeUpdateOne) sqlSave(ctx context.Context) (_node *IPChange, err error) {
	_spec := sqlgraph.NewUpdateSpec(ipchange.Table, ipchange.Columns, sqlgraph.NewFieldSpec(ipchange.FieldID, field.TypeInt64))
	id, ok := icuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IPChange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := icuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipchange.FieldID)
		for _, f := range fields {
			if !ipchange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ipchange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := icuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icuo.mutation.AgentID(); ok {
		_spec.SetField(ipchange.FieldAgentID, field.TypeString, value)
	}
	if value, ok := icuo.mutation.InterfaceName(); ok {
		_spec.SetField(ipchange.FieldInterfaceName, field.TypeString, value)
	}
	if icuo.mutation.InterfaceNameCleared() {
		_spec.ClearField(ipchange.FieldInterfaceName, field.TypeString)
	}
	if value, ok := icuo.mutation.Version(); ok {
		_spec.SetField(ipchange.FieldVersion, field.TypeString, value)
	}
	if value, ok := icuo.mutation.IsExternal(); ok {
		_spec.SetField(ipchange.FieldIsExternal, field.TypeBool, value)
	}
	if value, ok := icuo.mutation.OldAddrs(); ok {
		_spec.SetField(ipchange.FieldOldAddrs, field.TypeJSON, value)
	}
	if icuo.mutation.OldAddrsCleared() {
		_spec.ClearField(ipchange.FieldOldAddrs, field.TypeJSON)
	}
	if value, ok := icuo.mutation.NewAddrs(); ok {
		_spec.SetField(ipchange.FieldNewAddrs, field.TypeJSON, value)
	}
	if icuo.mutation.NewAddrsCleared() {
		_spec.ClearField(ipchange.FieldNewAddrs, field.TypeJSON)
	}
	if value, ok := icuo.mutation.Action(); ok {
		_spec.SetField(ipchange.FieldAction, field.TypeString, value)
	}
	if value, ok := icuo.mutation.Reason(); ok {
		_spec.SetField(ipchange.FieldReason, field.TypeString, value)
	}
	if value, ok := icuo.mutation.Timestamp(); ok {
		_spec.SetField(ipchange.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := icuo.mutation.CreatedAt(); ok {
		_spec.SetField(ipchange.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &IPChange{config: icuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, icuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	icuo.mutation.done = true
	return _node, nil
}
