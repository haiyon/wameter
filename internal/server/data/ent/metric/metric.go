// Code generated by ent, DO NOT EDIT.

package metric

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the metric type in the database.
	Label = "metric"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAgentID holds the string denoting the agent_id field in the database.
	FieldAgentID = "agent_id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldCollectedAt holds the string denoting the collected_at field in the database.
	FieldCollectedAt = "collected_at"
	// FieldReportedAt holds the string denoting the reported_at field in the database.
	FieldReportedAt = "reported_at"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the metric in the database.
	Table = "metrics"
)

// Columns holds all SQL columns for metric fields.
var Columns = []string{
	FieldID,
	FieldAgentID,
	FieldTimestamp,
	FieldCollectedAt,
	FieldReportedAt,
	FieldData,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Metric queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAgentID orders the results by the agent_id field.
func ByAgentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByCollectedAt orders the results by the collected_at field.
func ByCollectedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollectedAt, opts...).ToFunc()
}

// ByReportedAt orders the results by the reported_at field.
func ByReportedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
