// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wameter/internal/server/data/ent/ipchange"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IPChangeCreate is the builder for creating a IPChange entity.
type IPChangeCreate struct {
	config
	mutation *IPChangeMutation
	hooks    []Hook
}

// SetAgentID sets the "agent_id" field.
func (icc *IPChangeCreate) SetAgentID(s string) *IPChangeCreate {
	icc.mutation.SetAgentID(s)
	return icc
}

// SetInterfaceName sets the "interface_name" field.
func (icc *IPChangeCreate) SetInterfaceName(s string) *IPChangeCreate {
	icc.mutation.SetInterfaceName(s)
	return icc
}

// SetNillableInterfaceName sets the "interface_name" field if the given value is not nil.
func (icc *IPChangeCreate) SetNillableInterfaceName(s *string) *IPChangeCreate {
	if s != nil {
		icc.SetInterfaceName(*s)
	}
	return icc
}

// SetVersion sets the "version" field.
func (icc *IPChangeCreate) SetVersion(s string) *IPChangeCreate {
	icc.mutation.SetVersion(s)
	return icc
}

// SetIsExternal sets the "is_external" field.
func (icc *IPChangeCreate) SetIsExternal(b bool) *IPChangeCreate {
	icc.mutation.SetIsExternal(b)
	return icc
}

// SetOldAddrs sets the "old_addrs" field.
func (icc *IPChangeCreate) SetOldAddrs(m map[string]interface{}) *IPChangeCreate {
	icc.mutation.SetOldAddrs(m)
	return icc
}

// SetNewAddrs sets the "new_addrs" field.
func (icc *IPChangeCreate) SetNewAddrs(m map[string]interface{}) *IPChangeCreate {
	icc.mutation.SetNewAddrs(m)
	return icc
}

// SetAction sets the "action" field.
func (icc *IPChangeCreate) SetAction(s string) *IPChangeCreate {
	icc.mutation.SetAction(s)
	return icc
}

// SetReason sets the "reason" field.
func (icc *IPChangeCreate) SetReason(s string) *IPChangeCreate {
	icc.mutation.SetReason(s)
	return icc
}

// SetTimestamp sets the "timestamp" field.
func (icc *IPChangeCreate) SetTimestamp(t time.Time) *IPChangeCreate {
	icc.mutation.SetTimestamp(t)
	return icc
}

// SetCreatedAt sets the "created_at" field.
func (icc *IPChangeCreate) SetCreatedAt(t time.Time) *IPChangeCreate {
	icc.mutation.SetCreatedAt(t)
	return icc
}

// SetID sets the "id" field.
func (icc *IPChangeCreate) SetID(i int64) *IPChangeCreate {
	icc.mutation.SetID(i)
	return icc
}

// Mutation returns the IPChangeMutation object of the builder.
func (icc *IPChangeCreate) Mutation() *IPChangeMutation {
	return icc.mutation
}

// Save creates the IPChange in the database.
func (icc *IPChangeCreate) Save(ctx context.Context) (*IPChange, error) {
	return withHooks(ctx, icc.sqlSave, icc.mutation, icc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (icc *IPChangeCreate) SaveX(ctx context.Context) *IPChange {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icc *IPChangeCreate) Exec(ctx context.Context) error {
	_, err := icc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icc *IPChangeCreate) ExecX(ctx context.Context) {
	if err := icc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icc *IPChangeCreate) check() error {
	if _, ok := icc.mutation.AgentID(); !ok {
		return &ValidationError{Name: "agent_id", err: errors.New(`ent: missing required field "IPChange.agent_id"`)}
	}
	if _, ok := icc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "IPChange.version"`)}
	}
	if _, ok := icc.mutation.IsExternal(); !ok {
		return &ValidationError{Name: "is_external", err: errors.New(`ent: missing required field "IPChange.is_external"`)}
	}
	if _, ok := icc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "IPChange.action"`)}
	}
	if _, ok := icc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "IPChange.reason"`)}
	}
	if _, ok := icc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "IPChange.timestamp"`)}
	}
	if _, ok := icc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IPChange.created_at"`)}
	}
	return nil
}

func (icc *IPChangeCreate) sqlSave(ctx context.Context) (*IPChange, error) {
	if err := icc.check(); err != nil {
		return nil, err
	}
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	icc.mutation.id = &_node.ID
	icc.mutation.done = true
	return _node, nil
}

func (icc *IPChangeCreate) createSpec() (*IPChange, *sqlgraph.CreateSpec) {
	var (
		_node = &IPChange{config: icc.config}
		_spec = sqlgraph.NewCreateSpec(ipchange.Table, sqlgraph.NewFieldSpec(ipchange.FieldID, field.TypeInt64))
	)
	if id, ok := icc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := icc.mutation.AgentID(); ok {
		_spec.SetField(ipchange.FieldAgentID, field.TypeString, value)
		_node.AgentID = value
	}
	if value, ok := icc.mutation.InterfaceName(); ok {
		_spec.SetField(ipchange.FieldInterfaceName, field.TypeString, value)
		_node.InterfaceName = value
	}
	if value, ok := icc.mutation.Version(); ok {
		_spec.SetField(ipchange.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := icc.mutation.IsExternal(); ok {
		_spec.SetField(ipchange.FieldIsExternal, field.TypeBool, value)
		_node.IsExternal = value
	}
	if value, ok := icc.mutation.OldAddrs(); ok {
		_spec.SetField(ipchange.FieldOldAddrs, field.TypeJSON, value)
		_node.OldAddrs = value
	}
	if value, ok := icc.mutation.NewAddrs(); ok {
		_spec.SetField(ipchange.FieldNewAddrs, field.TypeJSON, value)
		_node.NewAddrs = value
	}
	if value, ok := icc.mutation.Action(); ok {
		_spec.SetField(ipchange.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := icc.mutation.Reason(); ok {
		_spec.SetField(ipchange.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := icc.mutation.Timestamp(); ok {
		_spec.SetField(ipchange.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := icc.mutation.CreatedAt(); ok {
		_spec.SetField(ipchange.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// IPChangeCreateBulk is the builder for creating many IPChange entities in bulk.
type IPChangeCreateBulk struct {
	config
	err      error
	builders []*IPChangeCreate
}

// Save creates the IPChange entities in the database.
func (iccb *IPChangeCreateBulk) Save(ctx context.Context) ([]*IPChange, error) {
	if iccb.err != nil {
		return nil, iccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*IPChange, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPChangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *IPChangeCreateBulk) SaveX(ctx context.Context) []*IPChange {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccb *IPChangeCreateBulk) Exec(ctx context.Context) error {
	_, err := iccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccb *IPChangeCreateBulk) ExecX(ctx context.Context) {
	if err := iccb.Exec(ctx); err != nil {
		panic(err)
	}
}
