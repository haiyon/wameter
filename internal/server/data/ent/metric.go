// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
	"wameter/internal/server/data/ent/metric"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Metric is the model entity for the Metric schema.
type Metric struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// AgentID holds the value of the "agent_id" field.
	AgentID string `json:"agent_id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// CollectedAt holds the value of the "collected_at" field.
	CollectedAt time.Time `json:"collected_at,omitempty"`
	// ReportedAt holds the value of the "reported_at" field.
	ReportedAt time.Time `json:"reported_at,omitempty"`
	// Data holds the value of the "data" field.
	Data map[string]interface{} `json:"data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Metric) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case metric.FieldData:
			values[i] = new([]byte)
		case metric.FieldID:
			values[i] = new(sql.NullInt64)
		case metric.FieldAgentID:
			values[i] = new(sql.NullString)
		case metric.FieldTimestamp, metric.FieldCollectedAt, metric.FieldReportedAt, metric.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Metric fields.
func (m *Metric) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metric.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int64(value.Int64)
		case metric.FieldAgentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_id", values[i])
			} else if value.Valid {
				m.AgentID = value.String
			}
		case metric.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				m.Timestamp = value.Time
			}
		case metric.FieldCollectedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field collected_at", values[i])
			} else if value.Valid {
				m.CollectedAt = value.Time
			}
		case metric.FieldReportedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reported_at", values[i])
			} else if value.Valid {
				m.ReportedAt = value.Time
			}
		case metric.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case metric.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Metric.
// This includes values selected through modifiers, order, etc.
func (m *Metric) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Metric.
// Note that you need to call Metric.Unwrap() before calling this method if this Metric
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Metric) Update() *MetricUpdateOne {
	return NewMetricClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Metric entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Metric) Unwrap() *Metric {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Metric is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Metric) String() string {
	var builder strings.Builder
	builder.WriteString("Metric(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("agent_id=")
	builder.WriteString(m.AgentID)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(m.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("collected_at=")
	builder.WriteString(m.CollectedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reported_at=")
	builder.WriteString(m.ReportedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", m.Data))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Metrics is a parsable slice of Metric.
type Metrics []*Metric
