// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
	"wameter/internal/server/data/ent/ipchange"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// IPChange is the model entity for the IPChange schema.
type IPChange struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// AgentID holds the value of the "agent_id" field.
	AgentID string `json:"agent_id,omitempty"`
	// InterfaceName holds the value of the "interface_name" field.
	InterfaceName string `json:"interface_name,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// IsExternal holds the value of the "is_external" field.
	IsExternal bool `json:"is_external,omitempty"`
	// OldAddrs holds the value of the "old_addrs" field.
	OldAddrs map[string]interface{} `json:"old_addrs,omitempty"`
	// NewAddrs holds the value of the "new_addrs" field.
	NewAddrs map[string]interface{} `json:"new_addrs,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IPChange) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ipchange.FieldOldAddrs, ipchange.FieldNewAddrs:
			values[i] = new([]byte)
		case ipchange.FieldIsExternal:
			values[i] = new(sql.NullBool)
		case ipchange.FieldID:
			values[i] = new(sql.NullInt64)
		case ipchange.FieldAgentID, ipchange.FieldInterfaceName, ipchange.FieldVersion, ipchange.FieldAction, ipchange.FieldReason:
			values[i] = new(sql.NullString)
		case ipchange.FieldTimestamp, ipchange.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IPChange fields.
func (ic *IPChange) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ipchange.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ic.ID = int64(value.Int64)
		case ipchange.FieldAgentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_id", values[i])
			} else if value.Valid {
				ic.AgentID = value.String
			}
		case ipchange.FieldInterfaceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interface_name", values[i])
			} else if value.Valid {
				ic.InterfaceName = value.String
			}
		case ipchange.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ic.Version = value.String
			}
		case ipchange.FieldIsExternal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_external", values[i])
			} else if value.Valid {
				ic.IsExternal = value.Bool
			}
		case ipchange.FieldOldAddrs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field old_addrs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ic.OldAddrs); err != nil {
					return fmt.Errorf("unmarshal field old_addrs: %w", err)
				}
			}
		case ipchange.FieldNewAddrs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field new_addrs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ic.NewAddrs); err != nil {
					return fmt.Errorf("unmarshal field new_addrs: %w", err)
				}
			}
		case ipchange.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				ic.Action = value.String
			}
		case ipchange.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				ic.Reason = value.String
			}
		case ipchange.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				ic.Timestamp = value.Time
			}
		case ipchange.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ic.CreatedAt = value.Time
			}
		default:
			ic.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IPChange.
// This includes values selected through modifiers, order, etc.
func (ic *IPChange) Value(name string) (ent.Value, error) {
	return ic.selectValues.Get(name)
}

// Update returns a builder for updating this IPChange.
// Note that you need to call IPChange.Unwrap() before calling this method if this IPChange
// was returned from a transaction, and the transaction was committed or rolled back.
func (ic *IPChange) Update() *IPChangeUpdateOne {
	return NewIPChangeClient(ic.config).UpdateOne(ic)
}

// Unwrap unwraps the IPChange entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ic *IPChange) Unwrap() *IPChange {
	_tx, ok := ic.config.driver.(*txDriver)
	if !ok {
		panic("ent: IPChange is not a transactional entity")
	}
	ic.config.driver = _tx.drv
	return ic
}

// String implements the fmt.Stringer.
func (ic *IPChange) String() string {
	var builder strings.Builder
	builder.WriteString("IPChange(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ic.ID))
	builder.WriteString("agent_id=")
	builder.WriteString(ic.AgentID)
	builder.WriteString(", ")
	builder.WriteString("interface_name=")
	builder.WriteString(ic.InterfaceName)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(ic.Version)
	builder.WriteString(", ")
	builder.WriteString("is_external=")
	builder.WriteString(fmt.Sprintf("%v", ic.IsExternal))
	builder.WriteString(", ")
	builder.WriteString("old_addrs=")
	builder.WriteString(fmt.Sprintf("%v", ic.OldAddrs))
	builder.WriteString(", ")
	builder.WriteString("new_addrs=")
	builder.WriteString(fmt.Sprintf("%v", ic.NewAddrs))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(ic.Action)
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(ic.Reason)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(ic.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ic.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IPChanges is a parsable slice of IPChange.
type IPChanges []*IPChange
